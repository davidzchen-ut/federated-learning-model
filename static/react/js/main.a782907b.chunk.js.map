{"version":3,"sources":["device/Device.tsx","runs/Run.tsx","runs/Runs.tsx","dashboard/Dashboard.tsx","routes/ContentRouter.tsx","sidebar/Sidebar.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Device","props","index","learningType","name","socket","topic","state","test_accuracies","test_losses","bytes_sent","system_info","undefined","this","on","response","data","JSON","parse","console","log","setState","prevState","test_accuracy","x","length","y","parseFloat","test_loss","parseInt","system","node","release","version","machine","processor","title","span","className","width","height","bordered","Item","label","Component","Footer","Layout","Content","Run","assignment","endpoint","runId","match","params","assignmentsByRunId","socketIOClient","reshapedAssignment","push","splice","deviceRender","map","subarray","outerIndex","contents","item","innerIndex","sm","md","lg","xl","key","device","learning_type","gutter","style","margin","textAlign","withRouter","Runs","useRouteMatch","to","path","Title","Typography","Dashboard","setAssignmentsByRunId","history","useHistory","useState","clusterMode","setClusterMode","numClusters","min","initialValues","numDevices","operationMode","onFinish","values","fetch","method","headers","Accept","body","stringify","then","json","run_id","assignments","max","Group","value","valuePropName","onChange","e","type","htmlType","ContentRouter","Sidebar","handleClick","href","Sider","theme","defaultSelectedKeys","mode","onClick","App","id","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.a782907b.chunk.js","sourcesContent":["/// <reference types=\"react-vis-types\" />\nimport React, { Component } from \"react\";\nimport { XYPlot, XAxis, YAxis, LineSeriesPoint, LineSeries } from \"react-vis\";\nimport \"../../node_modules/react-vis/dist/style.css\";\nimport \"./Device.css\";\n\nimport Card from \"antd/es/card\";\nimport Spin from \"antd/es/spin\";\nimport Descriptions from \"antd/es/descriptions\";\n\nimport Row from \"antd/es/row\";\nimport Col from \"antd/es/col\";\n\ntype DeviceProps = {\n  index: number;\n  learningType: string;\n  name: string;\n  socket: SocketIOClient.Socket;\n  topic: string;\n};\n\ntype DeviceState = {\n  bytes_sent: number;\n  test_accuracies: Array<LineSeriesPoint>;\n  test_losses: Array<LineSeriesPoint>;\n  system_info: SystemInfo | undefined;\n};\n\ntype SystemInfo = {\n  version: string;\n  release: string;\n  node: string;\n  system: string;\n  machine: string;\n  processor: string;\n};\n\nclass Device extends Component<DeviceProps, DeviceState> {\n  index: number;\n  learningType: string;\n  name: string;\n  socket: SocketIOClient.Socket;\n  topic: string;\n\n  constructor(props: DeviceProps) {\n    super(props);\n\n    const { index, learningType, name, socket, topic } = this.props;\n    this.index = index;\n    this.learningType = learningType;\n    this.name = name;\n    this.socket = socket;\n    this.topic = topic;\n\n    this.state = {\n      test_accuracies: [],\n      test_losses: [],\n      bytes_sent: 0,\n      system_info: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { name, socket } = this;\n    socket.on(name, (response: string) => {\n      const data = JSON.parse(response);\n\n      console.log(data);\n\n      this.setState((prevState) => {\n        const test_accuracy = {\n          x: prevState.test_accuracies.length,\n          y: parseFloat(\n            data[\"model_accuracy\"] !== \"0., dt\" ? data[\"model_accuracy\"] : 0\n          ),\n        };\n        const test_loss = {\n          x: prevState.test_losses.length,\n          y: parseFloat(data[\"test_loss\"]),\n        };\n        const bytes_sent = parseInt(data[\"size\"]);\n        const { system, node, release, version, machine, processor } = data;\n        const system_info = {\n          system,\n          node,\n          release,\n          version,\n          machine,\n          processor,\n        };\n        return {\n          test_accuracies: [...prevState.test_accuracies, test_accuracy],\n          test_losses: [...prevState.test_losses, test_loss],\n          bytes_sent: prevState.bytes_sent + bytes_sent,\n          system_info,\n        };\n      });\n    });\n  }\n\n  render() {\n    const {\n      test_accuracies,\n      test_losses,\n      bytes_sent,\n      system_info,\n    } = this.state;\n    return (\n      <Card title={\"Device #\" + this.index}>\n        {test_accuracies.length && test_losses.length ? (\n          <>\n            <Row>\n              <Col span={12}>\n                <XYPlot className=\"child\" width={300} height={300}>\n                  <XAxis title=\"Iteration\" />\n                  <YAxis title=\"Test Accuracy\" />\n                  <LineSeries data={test_accuracies} />\n                </XYPlot>\n              </Col>\n              <Col span={12}>\n                <XYPlot className=\"child\" width={300} height={300}>\n                  <XAxis title=\"Iteration\" />\n                  <YAxis title=\"Test Loss\" />\n                  <LineSeries data={test_losses} />\n                </XYPlot>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <Descriptions bordered>\n                  <Descriptions.Item label=\"Device Name\">\n                    {this.name}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"Learning Type\">\n                    {this.learningType}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"Topic\">\n                    {this.topic}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"Bytes Sent\">\n                    {bytes_sent}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"System Info\">\n                    Node: {system_info?.node}\n                    <br />\n                    Version: {system_info?.version}\n                    <br />\n                    Release: {system_info?.release}\n                    <br />\n                    Machine: {system_info?.machine}\n                    <br />\n                    Processor: {system_info?.processor}\n                  </Descriptions.Item>\n                </Descriptions>\n              </Col>\n            </Row>\n          </>\n        ) : (\n          <Spin />\n        )}\n      </Card>\n    );\n  }\n}\n\nexport default Device;\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./Run.css\";\n\nimport Layout from \"antd/es/layout\";\nimport Device from \"../device/Device\";\n\nimport Row from \"antd/es/row\";\nimport Col from \"antd/es/col\";\n\nconst { Footer, Content } = Layout;\n\nexport type Assignment = {\n  device: string;\n  topic: string;\n  learning_type: string;\n};\n\ntype PathParamsType = {\n  runId: string;\n};\n\ntype RunProps = RouteComponentProps<PathParamsType> & {\n  assignmentsByRunId: { [key: string]: any };\n};\n\ntype RunState = {\n  assignments: Assignment;\n  endpoint: string;\n  responses: { [key: string]: any };\n  runId: string;\n};\n\nclass Run extends Component<RunProps, RunState> {\n  assignment: Array<Assignment>;\n  endpoint: string;\n  runId: string | undefined;\n  socket: SocketIOClient.Socket;\n\n  constructor(props: RunProps) {\n    super(props);\n    const { runId } = this.props.match.params;\n\n    this.assignment = this.props.assignmentsByRunId[runId];\n    this.endpoint = \"192.168.1.26:5000\";\n    this.runId = runId;\n    this.socket = socketIOClient(this.endpoint);\n  }\n\n  render() {\n    let reshapedAssignment = [];\n    while (this.assignment.length)\n      reshapedAssignment.push(this.assignment.splice(0, 2));\n\n    let deviceRender = reshapedAssignment.map(\n      (subarray: Array<Assignment>, outerIndex: number) => {\n        let contents = subarray.map((item: Assignment, innerIndex: number) => {\n          let index = outerIndex * 2 + innerIndex + 1;\n          return (\n            <Col sm={24} md={24} lg={24} xl={12}>\n              <Device\n                index={index}\n                key={index}\n                name={item.device}\n                learningType={item.learning_type}\n                socket={this.socket}\n                topic={item.topic}\n              />\n            </Col>\n          );\n        });\n        return <Row gutter={[24, 24]}>{contents}</Row>;\n      }\n    );\n\n    return (\n      <Layout>\n        <Content style={{ margin: \"16px\" }}>\n          <h3>Requested run id: {this.runId}</h3>\n          {deviceRender}\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Federated Machine Learning Demo ©2020 Created by H21 Senior Design\n          Group\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default withRouter(Run);\n","import React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nfunction Runs() {\n  const match = useRouteMatch();\n\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to={`${match.path}/taskId`}>taskId</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Runs;\n","import React, { useState, SetStateAction, Dispatch } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Dashboard.css\";\n\nimport Button from \"antd/es/button\";\nimport Card from \"antd/es/card\";\nimport Divider from \"antd/es/divider\";\nimport Form from \"antd/es/form\";\nimport InputNumber from \"antd/es/input-number\";\nimport Layout from \"antd/es/layout\";\nimport Radio from \"antd/es/radio\";\nimport { Store } from \"rc-field-form/lib/interface\";\nimport Switch from \"antd/es/switch\";\nimport Typography from \"antd/es/typography\";\n\nconst { Title } = Typography;\nconst { Footer, Content } = Layout;\n\ninterface Props {\n  assignmentsByRunId: { [key: string]: any };\n  setAssignmentsByRunId: Dispatch<SetStateAction<{}>>;\n}\n\nfunction Dashboard({ assignmentsByRunId, setAssignmentsByRunId }: Props) {\n  let history = useHistory();\n\n  const onFinish = (values: Store) => {\n    fetch(\"http://192.168.1.26:5000/executeRun\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(values),\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(response);\n        const { run_id: runId, assignments } = response;\n        setAssignmentsByRunId({ ...assignmentsByRunId, [runId]: assignments });\n        history.push(\"/runs/\" + runId);\n      });\n  };\n\n  const [clusterMode, setClusterMode] = useState(false);\n  const numClusters = (\n    <Form.Item label=\"Number of Clusters\" name=\"numClusters\">\n      <InputNumber min={1} />\n    </Form.Item>\n  );\n  return (\n    <Layout className=\"site-layout\">\n      <Content style={{ margin: \"16px 16px\" }}>\n        <Form\n          name=\"form\"\n          initialValues={{ numDevices: 1, operationMode: 0, numClusters: 1 }}\n          onFinish={onFinish}\n        >\n          <Card>\n            <Title>Federated Machine Learning Demo</Title>\n            <Divider />\n            <Form.Item label=\"Number of devices\" name=\"numDevices\">\n              <InputNumber min={1} max={6} />\n            </Form.Item>\n            <Form.Item label=\"Operation mode\" name=\"operationMode\">\n              <Radio.Group>\n                <Radio value={0}>Centralized</Radio>\n                <Radio value={1}>Federated</Radio>\n                <Radio value={2}>Personalized</Radio>\n              </Radio.Group>\n            </Form.Item>\n            <Form.Item\n              label=\"Cluster mode\"\n              name=\"clusterMode\"\n              valuePropName=\"checked\"\n            >\n              <Switch onChange={(e) => setClusterMode(e)} />\n            </Form.Item>\n            {clusterMode && numClusters}\n            {/* \n            <Divider />\n            <Form.Item label=\"Maximum update size (in MB)\" name=\"updateSize\">\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item label=\"Update mode\" name=\"updateMode\">\n              <Radio.Group>\n                <Radio value={0}>Random</Radio>\n                <Radio value={1}>Smart Switch</Radio>\n              </Radio.Group>\n            </Form.Item>\n            <Form.Item label=\"Compression method\" name=\"compressionMode\">\n              <Radio.Group>\n                <Radio value={0}>None</Radio>\n                <Radio value={1}>Structured</Radio>\n                <Radio value={2}>Sketched</Radio>\n              </Radio.Group>\n            </Form.Item>\n             */}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit\n              </Button>\n            </Form.Item>\n          </Card>\n        </Form>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>\n        Federated Machine Learning Demo ©2020 Created by H21 Senior Design Group\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default Dashboard;\n","import React, { useState } from \"react\";\n// eslint-disable-next-line\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Run from \"../runs/Run\";\nimport Runs from \"../runs/Runs\";\nimport Dashboard from \"../dashboard/Dashboard\";\n\nfunction ContentRouter() {\n  const [assignmentsByRunId, setAssignmentsByRunId] = useState({});\n\n  return (\n    <Switch>\n      <Route path=\"/about\">\n        <div>Hello world</div>\n      </Route>\n      <Route path=\"/runs/:runId\">\n        <Run assignmentsByRunId={assignmentsByRunId} />\n      </Route>\n      <Route path=\"/runs\">\n        <Runs />\n      </Route>\n      <Route path=\"/\">\n        <Dashboard\n          assignmentsByRunId={assignmentsByRunId}\n          setAssignmentsByRunId={setAssignmentsByRunId}\n        />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default ContentRouter;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Sidebar.css\";\n\nimport Sider from \"antd/es/layout/Sider\";\nimport Menu from \"antd/es/menu\";\n\nfunction Sidebar() {\n  let history = useHistory();\n\n  function handleClick(href: string) {\n    history.push(href);\n  }\n\n  return (\n    <Sider>\n      <div className=\"logo\" />\n      <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\n        <Menu.Item key=\"1\" onClick={() => handleClick(\"/\")}>\n          <span>Home</span>\n        </Menu.Item>\n        <Menu.Item key=\"2\" onClick={() => handleClick(\"/runs\")}>\n          <span>Runs</span>\n        </Menu.Item>\n        <Menu.Item key=\"3\" onClick={() => handleClick(\"/about\")}>\n          <span>About</span>\n        </Menu.Item>\n      </Menu>\n    </Sider>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport ContentRouter from \"../routes/ContentRouter\";\nimport Sidebar from \"../sidebar/Sidebar\";\nimport Layout from \"antd/es/layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Layout id=\"parent-container\">\n          <Sidebar />\n          <ContentRouter />\n        </Layout>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}